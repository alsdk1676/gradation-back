<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.gradationback.mapper.ArtistMapper">

    <!-- 작가 리스트 -->
    <select id="selectArtistList" parameterType="Map" resultType="ArtistDTO">
        SELECT
            TU.ID,
            TU.USER_NAME,
            TU.USER_IMG_NAME,
            TU.USER_IMG_PATH,
            TU.USER_BACKGROUND_IMG_NAME,
            TU.USER_BACKGROUND_IMG_PATH,
            TU.USER_ART_CATEGORY,
            TUS.UNIVERSITY_NAME,
            ART.ART_IMG_NAME,
            ART.ART_IMG_PATH,
            ART.ART_POST_ID
        FROM TBL_USER TU
        JOIN TBL_MAJOR TM
            ON TU.MAJOR_ID = TM.ID
        JOIN TBL_UNIVERSITY TUS
        ON TM.UNIVERSITY_ID = TUS.ID
        JOIN (
            SELECT
                USER_ID,
                ART_IMG_NAME,
                ART_IMG_PATH,
                ART_POST_ID
            FROM (
                SELECT
                    TU.ID AS USER_ID,
                    TAI.ART_IMG_NAME,
                    TAI.ART_IMG_PATH,
                    TAP.ID AS ART_POST_ID,
                    ROW_NUMBER() OVER (PARTITION BY TU.ID ORDER BY TAP.ID ASC) AS RN
                FROM TBL_USER TU
                JOIN TBL_ART TA
                    ON TU.ID = TA.USER_ID
                JOIN TBL_ART_POST TAP
                    ON TA.ID = TAP.ART_ID
                JOIN TBL_ART_IMG TAI
                    ON TA.ID = TAI.ART_ID
                WHERE TA.ART_STATUS = '승인완료'
            )
            WHERE RN = 1
        ) ART ON TU.ID = ART.USER_ID
        WHERE TU.USER_WRITER_STATUS = '승인완료'

        <choose>
            <when test="category != null and category.equals('공예')">
                AND TU.USER_ART_CATEGORY = '공예'
            </when>
            <when test="category != null and category.equals('건축')">
                AND TU.USER_ART_CATEGORY = '건축'
            </when>
            <when test="category != null and category.equals('서예')">
                AND TU.USER_ART_CATEGORY = '서예'
            </when>
            <when test="category != null and category.equals('회화')">
                AND TU.USER_ART_CATEGORY = '회화'
            </when>
            <when test="category != null and category.equals('조각')">
                AND TU.USER_ART_CATEGORY = '조각'
            </when>
            <when test="category != null and category.equals('한국화')">
                AND TU.USER_ART_CATEGORY = '한국화'
            </when>
            <otherwise>
                AND TU.USER_ART_CATEGORY = '한국화'
            </otherwise>
        </choose>

        <if test="keyword != null and keyword != ''">
            AND TU.USER_NAME LIKE CONCAT('%', CONCAT(#{keyword}, '%'))
        </if>
        <choose>
            <when test="order != null and order.equals('name')">
                ORDER BY TU.USER_NAME DESC
            </when>
            <when test="order != null and order.equals('recent')">
                ORDER BY TU.ID DESC
            </when>
            <otherwise>
                ORDER BY TU.ID DESC
            </otherwise>
        </choose>
        OFFSET (#{cursor} - 1) * 15 ROWS
        FETCH NEXT 15 ROWS ONLY
    </select>

    <select id="selectCountArtistList" parameterType="Map" resultType="Integer">
        SELECT COUNT(DISTINCT TU.ID)
        FROM TBL_USER TU
        JOIN TBL_MAJOR TM
            ON TU.MAJOR_ID = TM.ID
        JOIN TBL_UNIVERSITY TUS
            ON TM.UNIVERSITY_ID = TUS.ID
        JOIN (
            SELECT
                USER_ID,
                ART_IMG_NAME,
                ART_IMG_PATH
            FROM (
                SELECT
                    TU.ID AS USER_ID,
                    TAI.ART_IMG_NAME,
                    TAI.ART_IMG_PATH,
                    ROW_NUMBER() OVER (PARTITION BY TU.ID ORDER BY TAP.ID ASC) AS RN
                FROM TBL_USER TU
                JOIN TBL_ART TA
                    ON TU.ID = TA.USER_ID
                JOIN TBL_ART_POST TAP
                    ON TA.ID = TAP.ART_ID
                JOIN TBL_ART_IMG TAI
                    ON TA.ID = TAI.ART_ID
                WHERE TA.ART_STATUS = '승인완료'
            )
            WHERE RN = 1
        ) ART ON TU.ID = ART.USER_ID
        WHERE TU.USER_WRITER_STATUS = '승인완료'

        <choose>
            <when test="category != null and category.equals('공예')">
                AND TU.USER_ART_CATEGORY = '공예'
            </when>
            <when test="category != null and category.equals('건축')">
                AND TU.USER_ART_CATEGORY = '건축'
            </when>
            <when test="category != null and category.equals('서예')">
                AND TU.USER_ART_CATEGORY = '서예'
            </when>
            <when test="category != null and category.equals('회화')">
                AND TU.USER_ART_CATEGORY = '회화'
            </when>
            <when test="category != null and category.equals('조각')">
                AND TU.USER_ART_CATEGORY = '조각'
            </when>
            <when test="category != null and category.equals('한국화')">
                AND TU.USER_ART_CATEGORY = '한국화'
            </when>
            <otherwise>
                AND TU.USER_ART_CATEGORY = '한국화'
            </otherwise>
        </choose>

        <if test="keyword != null and keyword != ''">
            AND TU.USER_NAME LIKE CONCAT('%', CONCAT(#{keyword}, '%'))
        </if>
    </select>


<!--    작가 정보 수정 -->
    <update id="updateArtist" parameterType="UserVO">
        update TBL_USER
        SET USER_INTRODUCE = #{userIntroduce},
            USER_ART_CATEGORY = #{userArtCategory},
            USER_INSTAGRAM = #{userInstagram},
            USER_YOUTUBE = #{userYoutube},
            USER_BLOG = #{userBlog},
            USER_BACKGROUND_IMG_PATH = #{userBackgroundImgPath},
            USER_BACKGROUND_IMG_NAME = #{userBackgroundImgName}
        WHERE ID = #{id}
    </update>

<!--    작가 이력 추가 -->
    <insert id="insertUserHistory" parameterType="HistoryVO">
        <selectKey keyProperty="id" resultType="Long" order="BEFORE">
            SELECT SEQ_HISTORY.NEXTVAL FROM DUAL
        </selectKey>

        INSERT INTO TBL_HISTORY (
            ID,
            HISTORY_DATE,
            HISTORY_CONTENT,
            USER_ID
        )
        VALUES (
            #{id},
            #{historyDate},
            #{historyContent},
            #{userId}
        )
    </insert>

<!--    작가이력 삭제 -->
    <delete id="deleteUserHistory" parameterType="Long">
        DELETE FROM TBL_HISTORY
        WHERE ID = #{id}
    </delete>

<!--    ARTIST 디테일(user정보 + 이력)-->
    <select id="selectArtistById" parameterType="Long" resultType="ArtistDetailDTO">
        SELECT
            TU.ID AS ID,
            TU.USER_IMG_NAME,
            TU.USER_IMG_PATH,
            TU.USER_NAME,
            TU.USER_EMAIL,
            TUN.UNIVERSITY_NAME,
            TU.USER_INSTAGRAM,
            TU.USER_BLOG,
            TU.USER_YOUTUBE,
            TU.USER_INTRODUCE,
            TU.USER_ART_CATEGORY,
            TH.ID AS HISTORY_ID,
            TH.HISTORY_DATE,
            TH.HISTORY_CONTENT
        FROM TBL_USER TU
        LEFT JOIN TBL_MAJOR TM
            ON TU.MAJOR_ID = TM.ID
        JOIN TBL_UNIVERSITY TUN
            ON TM.UNIVERSITY_ID = TUN.ID
        LEFT JOIN TBL_HISTORY TH
            ON TU.ID = TH.USER_ID
        WHERE TU.ID = #{userId}
    </select>

<!--    작품들 썸네일 -->
    <select id="selectArtistArts" parameterType="Map" resultType="ArtistDetailDTO">
        SELECT
            TA.ID AS ART_ID,
            TA.ART_TITLE,
            TU.USER_NAME,
            TAI.ART_IMG_NAME,
            TAI.ART_IMG_PATH,
            TAP.ID AS ART_POST_ID
        FROM TBL_ART TA
        JOIN (
            SELECT TAI1.ART_ID, TAI1.ART_IMG_NAME, TAI1.ART_IMG_PATH
            FROM TBL_ART_IMG TAI1
            JOIN (
                SELECT ART_ID, MIN(ID) AS MIN_ID
                FROM TBL_ART_IMG
                GROUP BY ART_ID
            ) TAI2
                ON TAI1.ART_ID = TAI2.ART_ID AND TAI1.ID = TAI2.MIN_ID
        ) TAI
            ON TA.ID = TAI.ART_ID
        JOIN TBL_USER TU
            ON TA.USER_ID = TU.ID
        JOIN TBL_ART_POST TAP
            ON TAP.ART_ID = TA.ID
        WHERE TA.USER_ID = #{userId} AND TA.ART_STATUS = '승인완료'
        ORDER BY TAP.ID ASC
        OFFSET (#{cursor} - 1) * 9 ROWS
        FETCH NEXT 9 ROWS ONLY
    </select>

    <!--    작품들 썸네일 페이지 네이션 -->
    <select id="selectCountArtistArts" parameterType="Long" resultType="Integer">
        SELECT COUNT(TAP.ID)
        FROM TBL_ART TA
        JOIN (
            SELECT TAI1.ART_ID, TAI1.ART_IMG_NAME, TAI1.ART_IMG_PATH
            FROM TBL_ART_IMG TAI1
            JOIN (
                SELECT ART_ID, MIN(ID) AS MIN_ID
                FROM TBL_ART_IMG
                GROUP BY ART_ID
            ) TAI2
                ON TAI1.ART_ID = TAI2.ART_ID AND TAI1.ID = TAI2.MIN_ID
        ) TAI
            ON TA.ID = TAI.ART_ID
        JOIN TBL_USER TU
            ON TA.USER_ID = TU.ID
        JOIN TBL_ART_POST TAP
            ON TAP.ART_ID = TA.ID
        WHERE TA.USER_ID = #{userId} AND TA.ART_STATUS = '승인완료'
        ORDER BY TAP.ID ASC
    </select>
    

</mapper>















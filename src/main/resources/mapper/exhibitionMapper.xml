<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.gradationback.mapper.ExhibitionMapper">

    <!--    그라데이션 -->
<!--    전시회 정보 불러오기 -->
        <select id="selectGradation" resultType="GradationExhibitionVO">
            SELECT
                ID,
                GRADATION_EXHIBITION_TITLE,
                GRADATION_EXHIBITION_ART,
                GRADATION_EXHIBITION_CATEGORY,
                GRADATION_EXHIBITION_TIME,
                GRADATION_EXHIBITION_FEE,
                GRADATION_EXHIBITION_TEL,
                GRADATION_EXHIBITION_ADDRESS,
                GRADATION_EXHIBITION_REAL_ADDRESS,
                GRADATION_EXHIBITION_DATE
            FROM (
                SELECT
                    ID,
                    GRADATION_EXHIBITION_TITLE,
                    GRADATION_EXHIBITION_ART,
                    GRADATION_EXHIBITION_CATEGORY,
                    GRADATION_EXHIBITION_TIME,
                    GRADATION_EXHIBITION_FEE,
                    GRADATION_EXHIBITION_TEL,
                    GRADATION_EXHIBITION_ADDRESS,
                    GRADATION_EXHIBITION_REAL_ADDRESS,
                    GRADATION_EXHIBITION_DATE
                FROM TBL_GRADATION_EXHIBITION
                ORDER BY ID DESC
            )
            WHERE ROWNUM = 1
        </select>

<!--        전시관 장소 이미지 리스트로 불러오기 -->
    <select id="selectGradationImgAll" parameterType="Long" resultType="GradationExhibitionImgVO">
        SELECT
            ID,
            GRADATION_EXHIBITION_IMG_NAME,
            GRADATION_EXHIBITION_IMG_PATH,
            GRADATION_EXHIBITION_ID
        FROM TBL_GRADATION_EXHIBITION_IMG
        WHERE GRADATION_EXHIBITION_ID = #{gradationExhibitionId}
        ORDER BY ID
    </select>

    <!--    전시회 등록 -->
    <insert id="insertGradation" parameterType="GradationExhibitionVO">
        <selectKey keyProperty="id" order="BEFORE" resultType="Long">
            SELECT  SEQ_GRADATION_EXHIBITION.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_GRADATION_EXHIBITION (
        ID,
        GRADATION_EXHIBITION_TITLE,
        GRADATION_EXHIBITION_ART,
        GRADATION_EXHIBITION_CATEGORY,
        GRADATION_EXHIBITION_TIME,
        GRADATION_EXHIBITION_FEE,
        GRADATION_EXHIBITION_TEL,
        GRADATION_EXHIBITION_ADDRESS,
        GRADATION_EXHIBITION_REAL_ADDRESS,
        GRADATION_EXHIBITION_DATE
        )
        VALUES (
        #{id},
        #{gradationExhibitionTitle},
        #{gradationExhibitionArt},
        #{gradationExhibitionCategory},
        #{gradationExhibitionTime},
        #{gradationExhibitionFee},
        #{gradationExhibitionTel},
        #{gradationExhibitionAddress},
        #{gradationExhibitionRealAddress},
        #{gradationExhibitionDate}
        )
    </insert>

    <!--    전시관 장소 이미지 추가 -->
    <insert id="insertGradationImg" parameterType="GradationExhibitionImgVO">
        <selectKey keyProperty="id" order="BEFORE" resultType="Long">
            SELECT SEQ_GRADATION_EXHIBITION_IMG.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_GRADATION_EXHIBITION_IMG (
        ID,
        GRADATION_EXHIBITION_IMG_NAME,
        GRADATION_EXHIBITION_IMG_PATH,
        GRADATION_EXHIBITION_ID
        )
        VALUES (
        #{id},
        #{gradationExhibitionImgName},
        #{gradationExhibitionImgPath},
        #{gradationExhibitionId})
    </insert>

    <!--    올해 좋아요 top50 -->
    <select id="selectTop50ArtId" resultType="Long">
        SELECT ART_ID
        FROM (
                 SELECT ART_ID, COUNT(ID) AS LIKE_COUNT
                 FROM TBL_ART_LIKE
                 WHERE EXTRACT(YEAR FROM ART_LIKE_TIME) = EXTRACT(YEAR FROM SYSDATE)
                 GROUP BY ART_ID
                 ORDER BY LIKE_COUNT DESC
             )
        WHERE ROWNUM &lt;= 50
    </select>

    <!--    지난 전시회 등록 -->
    <insert id="insertPastGradationArt" parameterType="map">
        INSERT INTO TBL_EXHIBITION_PAST_ART(
            ID,
            GRADATION_EXHIBITION_ID,
            ART_ID
        )
        VALUES (
            SEQ_EXHIBITION_PAST_ART.NEXTVAL,
            #{gradationExhibitionId},
            #{artId}
        )
    </insert>


    <!--    전시회 정보 수정 -->
    <update id="updateGradation" parameterType="GradationExhibitionVO">
        UPDATE TBL_GRADATION_EXHIBITION
        SET GRADATION_EXHIBITION_TITLE = #{gradationExhibitionTitle},
            GRADATION_EXHIBITION_ART = #{gradationExhibitionArt},
            GRADATION_EXHIBITION_CATEGORY = #{gradationExhibitionCategory},
            GRADATION_EXHIBITION_TIME = #{gradationExhibitionTime},
            GRADATION_EXHIBITION_FEE = #{gradationExhibitionFee},
            GRADATION_EXHIBITION_TEL = #{gradationExhibitionTel},
            GRADATION_EXHIBITION_ADDRESS = #{gradationExhibitionAddress},
            GRADATION_EXHIBITION_REAL_ADDRESS = #{gradationExhibitionRealAddress},
            GRADATION_EXHIBITION_DATE = #{gradationExhibitionDate}
        WHERE ID = #{id}
    </update>

    <!--    전시회 장소 이미지 삭제 -->
    <delete id="deleteGradationImg" parameterType="Long">
        DELETE FROM TBL_GRADATION_EXHIBITION_IMG
        WHERE ID = #{id}
    </delete>

<!--    최근 전시회 년도 + 제목 3개 List(올해 제외)  -->
    <select id="selectRecentGradations" resultType="GradationExhibitionVO">
        SELECT
            ID,
            GRADATION_EXHIBITION_TITLE,
            GRADATION_EXHIBITION_DATE
        FROM (
            SELECT
                ID,
                GRADATION_EXHIBITION_TITLE,
                GRADATION_EXHIBITION_DATE
            FROM TBL_GRADATION_EXHIBITION
            WHERE TO_NUMBER(SUBSTR(GRADATION_EXHIBITION_DATE, 1, 4)) &lt; (
                SELECT MAX(TO_NUMBER(SUBSTR(GRADATION_EXHIBITION_DATE, 1, 4)))
                FROM TBL_GRADATION_EXHIBITION
            )
            ORDER BY TO_NUMBER(SUBSTR(GRADATION_EXHIBITION_DATE, 1, 4)) DESC
        )
        WHERE ROWNUM &lt;=3
    </select>

<!--   좋아요순 50개 작품 -->
    <select id="selectTopLikedArts" resultType="DisplayDTO">
        SELECT
            TAR.ID,
            TAI.ART_IMG_NAME,
            TAI.ART_IMG_PATH,
            TAR.ART_TITLE,
            TU.USER_NAME,
            TAL.LIKE_COUNT
        FROM TBL_ART TAR
        JOIN (
            SELECT ART_ID, COUNT(ID) AS LIKE_COUNT
            FROM TBL_ART_LIKE
            WHERE EXTRACT(YEAR FROM ART_LIKE_TIME) = EXTRACT(YEAR FROM CURRENT_DATE)
            GROUP BY ART_ID
            ORDER BY LIKE_COUNT DESC
                FETCH NEXT 50 ROWS ONLY
        ) TAL
            ON TAR.ID = TAL.ART_ID
            JOIN (
                SELECT T1.ART_ID, T1.ART_IMG_NAME, T1.ART_IMG_PATH
                FROM TBL_ART_IMG T1
                JOIN (
                    SELECT ART_ID, MIN(ID) AS MIN_ID
                    FROM TBL_ART_IMG
                    GROUP BY ART_ID
                ) T2
                    ON T1.ART_ID = T2.ART_ID
                    AND T1.ID = T2.MIN_ID
            ) TAI
                ON TAR.ID = TAI.ART_ID
            JOIN TBL_USER TU
                ON TAR.USER_ID = TU.ID
    </select>


<!--    지난 전시회 -->
    <select id="selectPastExhibitions" resultType="ExhibitionPastDTO">
        SELECT
            ID,
            TO_CHAR(TO_DATE(SUBSTR(GRADATION_EXHIBITION_DATE, 1, 4), 'YYYY'), 'YYYY') || ' ' || GRADATION_EXHIBITION_TITLE AS gradationExhibitionTitle
        FROM TBL_GRADATION_EXHIBITION
        WHERE TO_NUMBER(SUBSTR(GRADATION_EXHIBITION_DATE, 1, 4)) &lt; (
            SELECT MAX(TO_NUMBER(SUBSTR(GRADATION_EXHIBITION_DATE, 1, 4)))
            FROM TBL_GRADATION_EXHIBITION
        )
        ORDER BY TO_NUMBER(SUBSTR(GRADATION_EXHIBITION_DATE, 1, 4)) DESC
    </select>

<!--    지난 전시회 작품 리스트 -->
    <select id="selectExhibitionArtList" parameterType="map" resultType="ExhibitionPastDTO">
        SELECT
            TAR.ID,
            TAR.ID AS ART_ID,
            TAR.ART_TITLE,
            TAI.ART_IMG_NAME,
            TAI.ART_IMG_PATH,
            TU.USER_NAME
        FROM TBL_EXHIBITION_PAST_ART EPA
        JOIN TBL_ART TAR
            ON EPA.ART_ID = TAR.ID
        JOIN TBL_USER TU
            ON TAR.USER_ID = TU.ID
        JOIN (
            SELECT T1.ART_ID, T1.ART_IMG_NAME, T1.ART_IMG_PATH
            FROM TBL_ART_IMG T1
            JOIN (
                SELECT ART_ID, MIN(ID) AS MIN_ID
                FROM TBL_ART_IMG
                GROUP BY ART_ID
            )T2
                ON T1.ART_ID = T2.ART_ID AND T1.ID = T2.MIN_ID
        )TAI
            ON TAR.ID = TAI.ART_ID
        WHERE EPA.GRADATION_EXHIBITION_ID = #{exhibitionId}
        ORDER BY TAR.ID
        OFFSET (#{cursor} - 1) * 15 ROWS
        FETCH NEXT 15 ROWS ONLY
    </select>

<!--    지난 전시회 페이지 네이션-->
    <select id="selectExhibitionCountArtList" parameterType="Long" resultType="Integer">
        SELECT COUNT(TAR.ID)
        FROM TBL_EXHIBITION_PAST_ART EPA
        JOIN TBL_ART TAR
          ON EPA.ART_ID = TAR.ID
        JOIN TBL_USER TU
          ON TAR.USER_ID = TU.ID
        JOIN (
            SELECT T1.ART_ID, T1.ART_IMG_NAME, T1.ART_IMG_PATH
            FROM TBL_ART_IMG T1
                JOIN (
                    SELECT ART_ID, MIN(ID) AS MIN_ID
                    FROM TBL_ART_IMG
                    GROUP BY ART_ID
                )T2
                    ON T1.ART_ID = T2.ART_ID AND T1.ID = T2.MIN_ID
        )TAI
            ON TAR.ID = TAI.ART_ID
        WHERE EPA.GRADATION_EXHIBITION_ID = #{exhibitionId}
        ORDER BY TAR.ID
    </select>



    <!--    대학교 전시회 -->
<!--    신청 양식(학교) -->
    <insert id="insertUniversity" parameterType="UniversityExhibitionDTO">
        <selectKey keyProperty="id" order="BEFORE" resultType="Long">
            SELECT SEQ_UNIVERSITY.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_UNIVERSITY(
            ID,
            UNIVERSITY_NAME,
            UNIVERSITY_LOGO_IMG_NAME,
            UNIVERSITY_LOGO_IMG_PATH,
            UNIVERSITY_HOMEPAGE
        )
        VALUES (
            #{id},
            #{universityName},
            #{universityLogoImgName},
            #{universityLogoImgPath},
            #{universityHomepage}
        )
    </insert>

<!--    신청 양식(학과) -->
    <insert id="insertMajor" parameterType="UniversityExhibitionDTO">
        <selectKey keyProperty="majorId" resultType="Long" order="BEFORE">
            SELECT SEQ_MAJOR.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_MAJOR (
            ID,
            UNIVERSITY_ID,
            MAJOR_NAME
        )
        VALUES (
            #{majorId},
            #{id},
            #{majorName}
        )
    </insert>

<!--    신청 양식(대학교 전시회) -->
    <insert id="insertUniversityExhibition" parameterType="UniversityExhibitionDTO">
        <selectKey keyProperty="id" order="BEFORE" resultType="Long">
            SELECT SEQ_UNIVERSITY_EXHIBITION.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_UNIVERSITY_EXHIBITION(
            ID,
            UNIVERSITY_EXHIBITION_START_DATE,
            UNIVERSITY_EXHIBITION_END_DATE,
            UNIVERSITY_EXHIBITION_TITLE,
            UNIVERSITY_EXHIBITION_LOCATION,
            UNIVERSITY_EXHIBITION_REQUEST_DATE,
            MAJOR_ID,
            USER_ID
        )
        VALUES (
            #{id},
            #{universityExhibitionStartDate},
            #{universityExhibitionEndDate},
            #{universityExhibitionTitle},
            #{universityExhibitionLocation},
            #{universityExhibitionRequestDate},
            #{majorId},
            #{userId}
        )
    </insert>
    
    <insert id="insertUniversityExhibitionImg" parameterType="UniversityExhibitionDTO" >
        INSERT INTO TBL_UNIVERSITY_EXHIBITION_IMG (
            ID,
            UNIVERSITY_EXHIBITION_IMG_NAME,
            UNIVERSITY_EXHIBITION_IMG_PATH,
            UNIVERSITY_EXHIBITION_ID
        )
        VALUES (
            SEQ_UNIVERSITY_EXHIBITION_IMG.NEXTVAL,
            #{universityExhibitionImgName},
            #{universityExhibitionImgPath},
            #{universityExhibitionId}
        )
    </insert>

<!--   대학교 조회 -->
    <select id="findUniversityByName" parameterType="String" resultType="UniversityVO">
        SELECT
            ID,
            UNIVERSITY_NAME,
            UNIVERSITY_LOGO_IMG_NAME,
            UNIVERSITY_LOGO_IMG_PATH,
            UNIVERSITY_HOMEPAGE
        FROM TBL_UNIVERSITY
        WHERE UNIVERSITY_NAME = #{universityName}
    </select>

<!--    대학교 전시회 정보 조회 (지역 + 전시상태 + 검색) -->
    <select id="selectUniversity" parameterType="Map" resultType="UniversityExhibitionDTO">
        SELECT
            TUE.ID,
            TU.UNIVERSITY_LOGO_IMG_NAME,
            TU.UNIVERSITY_LOGO_IMG_PATH,
            TU.UNIVERSITY_NAME,
            TU.UNIVERSITY_HOMEPAGE,
            TUE.UNIVERSITY_EXHIBITION_TITLE,
            TM.MAJOR_NAME,
            TUE.UNIVERSITY_EXHIBITION_START_DATE,
            TUE.UNIVERSITY_EXHIBITION_END_DATE,
            TUE.UNIVERSITY_EXHIBITION_LOCATION,
            TUE.UNIVERSITY_EXHIBITION_STATUS,
            TU.UNIVERSITY_LOCATION,
            TUL.ID AS UNIVERSITY_LIKE_ID
        FROM TBL_UNIVERSITY_EXHIBITION TUE
        JOIN TBL_MAJOR TM
            ON TUE.MAJOR_ID = TM.ID
        JOIN TBL_UNIVERSITY TU
            ON TM.UNIVERSITY_ID = TU.ID
        LEFT JOIN TBL_UNIVERSITY_LIKE TUL
            ON TUL.UNIVERSITY_EXHIBITION_ID = TUE.ID
        <if test="userId != null">
            AND TUL.USER_ID = #{userId}
        </if>
        WHERE TUE.UNIVERSITY_EXHIBITION_STATUS = '승인완료' AND TUE.UNIVERSITY_EXHIBITION_END_DATE >= SYSDATE

        <if test="location != null and location != '' and location != '전체지역'">
            AND (
            REGEXP_SUBSTR(TU.UNIVERSITY_LOCATION, '^[^ ]+') = #{location}
            OR SUBSTR(TU.UNIVERSITY_LOCATION, 1, LENGTH(#{location})) = #{location}
            )
        </if>

        <if test="universityExhibitionStatus != null and universityExhibitionStatus.equals('예정전시')">
            AND TUE.UNIVERSITY_EXHIBITION_START_DATE &gt; SYSDATE
        </if>
        <if test="universityExhibitionStatus != null and universityExhibitionStatus.equals('현재전시')">
            AND TUE.UNIVERSITY_EXHIBITION_START_DATE &lt;= SYSDATE
            AND TUE.UNIVERSITY_EXHIBITION_END_DATE &gt;= SYSDATE
        </if>

        <if test="keyword != null and keyword != ''">
            AND TU.UNIVERSITY_NAME LIKE '%' || #{keyword} || '%'
        </if>
    </select>

<!--    대학교 전시회 이미지 조회 -->
    <select id="selectUniversityImgAll" parameterType="Long" resultType="UniversityExhibitionImgVO">
        SELECT
            ID,
            UNIVERSITY_EXHIBITION_IMG_NAME,
            UNIVERSITY_EXHIBITION_IMG_PATH,
            UNIVERSITY_EXHIBITION_ID
        FROM TBL_UNIVERSITY_EXHIBITION_IMG
        WHERE UNIVERSITY_EXHIBITION_ID = #{universityExhibitionId}
    </select>

<!--    대학교 좋아요 -->
    <insert id="insertUniversityLike" parameterType="UniversityLikeVO">
        INSERT INTO TBL_UNIVERSITY_LIKE (ID, UNIVERSITY_LIKE_TIME, UNIVERSITY_EXHIBITION_ID, USER_ID)
        VALUES (SEQ_UNIVERSITY_LIKE.NEXTVAL, SYSTIMESTAMP, #{universityExhibitionId}, #{userId})
    </insert>

<!--    좋아요 여부 -->
    <select id="selectUniversityLike" parameterType="UniversityLikeVO">
        SELECT COUNT(ID)
        FROM TBL_UNIVERSITY_LIKE
        WHERE USER_ID = #{userId} AND UNIVERSITY_EXHIBITION_ID = #{universityExhibitionId}
    </select>

<!--    좋아요 취소 -->
    <delete id="deleteUniversityLike" parameterType="UniversityLikeVO">
        DELETE FROM TBL_UNIVERSITY_LIKE
        WHERE USER_ID = #{userId} AND UNIVERSITY_EXHIBITION_ID = #{universityExhibitionId}
    </delete>

<!--    내가 신청한 전시회 승인내역 조회-->
    <select id="selectExhibitionStatus" parameterType="Long" resultType="UniversityExhibitionDTO">
        select TUE.ID, TU.UNIVERSITY_NAME, TM.MAJOR_NAME, TUE.UNIVERSITY_EXHIBITION_TITLE, TUE.UNIVERSITY_EXHIBITION_STATUS, TUE.USER_ID
        from TBL_UNIVERSITY_EXHIBITION TUE
            JOIN TBL_MAJOR TM
            ON TUE.MAJOR_ID = TM.ID
            JOIN TBL_UNIVERSITY TU
            ON TU.ID = TM.UNIVERSITY_ID
        WHERE USER_ID = #{userId}
    </select>

<!--    내가 좋아요 한 전시회 목록-->
    <select id="selectLikedUniversityExhibition" parameterType="Long" resultType="UniversityExhibitionDTO">
        SELECT
            TUL.ID AS LIKE_ID,
            TUE.ID AS EXHIBITION_ID,
            TU.UNIVERSITY_NAME,
            TU.UNIVERSITY_LOGO_IMG_NAME,
            TU.UNIVERSITY_LOGO_IMG_PATH,
            TUE.UNIVERSITY_EXHIBITION_TITLE,
            TM.MAJOR_NAME,
            TUE.UNIVERSITY_EXHIBITION_START_DATE,
            TUE.UNIVERSITY_EXHIBITION_END_DATE,
            TUE.UNIVERSITY_EXHIBITION_LOCATION
        FROM TBL_UNIVERSITY_LIKE TUL
             JOIN TBL_UNIVERSITY_EXHIBITION TUE
            ON TUL.UNIVERSITY_EXHIBITION_ID = TUE.ID
            JOIN TBL_MAJOR TM
            ON TUE.MAJOR_ID = TM.ID
            JOIN TBL_UNIVERSITY TU
            ON TM.UNIVERSITY_ID = TU.ID
        WHERE TUL.USER_ID = #{userId}
        ORDER BY TUL.UNIVERSITY_LIKE_TIME DESC
    </select>
</mapper>















